{
  "javascriptQuestions": [{
      "question": "typeof null",
      "answer": "\"object\""
    },
    {
      "question": "typeof [1, 2, \"Four\", 8]",
      "answer": "\"object\""
    },
    {
      "question": "typeof true",
      "answer": "\"boolean\""
    },
    {
      "question": "typeof 3",
      "answer": "\"number\""
    },
    {
      "question": "typeof undefined",
      "answer": "\"undefined\""
    },
    {
      "question": "typeof NaN",
      "answer": "\"number\""
    },
    {
      "question": "typeof (typeof 1)",
      "answer": "\"string\""
    },
    {
      "question": "typeof new Date()",
      "answer": "\"object\""
    },
    {
      "question": "Result of (1 + undefined)",
      "answer": "1undefined"
    },
    {
      "question": "<p>Result of the below</p><p>let bool = true;</p><p>1. bool + 0</p><p>2. bool + ' kanye'</p><p>3. bool + true</p><p>4. bool + false</p>",
      "answer": "<p>let bool = true;</p><p>1. bool + 0 === 1</p><p>2. bool + 'kanye' === 'bool kanye'</p><p>3. bool + true === 2</p><p>4. bool + false === 1</p>"
    },
    {
      "question": "Function to test if something is a not a number",
      "answer": "isNaN(argument) Note: Includes Ints and Floats"
    },
    {
      "question": "Function to test if something is an array",
      "answer": "Array.isArray(argument)"
    },
    {
      "question": "Old school way to check if variable is an Object, Array, Null, or Date",
      "answer": "<p>if (Object.prototype.toString.call( [1,2,'hi'] ) === '[object Array]) {</p> <p>execute if true</p> <p>}</p><p>Possible results: '[object Object]','[object Null]', '[object Date]'</p>"
    },
    {
      "question": "Find length of an Object",
      "answer": "<p>'Object.keys(obj)' will return all properties of an object into an array</p><p>So you can do Object.keys(obj).length to find the length</p>"
    },
    {
      "question": "How to empty an array by reference?",
      "answer": "<p>1. array.length = 1</p><p>1. array.splice(0, array.length)</p>"
    },
    {
      "question": "What does indexOf(searchValue) return?",
      "answer": "'array.indexOf(searchvalue, start)' returns the position of the first occurrence of a specified value in an array or string if not found -1"
    },
    {
      "question": "Remove item from an object",
      "answer": "<p>var test = {'red':'#FF0000', 'blue':'#0000FF'};</p><p>delete test.blue;</p>"
    },
    {
      "question": "What does Math.random() return?",
      "answer": "Floating-point random number btw 0 (inclusive) and 1 (exclusive)"
    },
    {
      "question": "In JS how to do you create a new element?",
      "answer": "document.createElement(\"string\");"
    },
    {
      "question": "How do you add a class name to an element?",
      "answer": "<p>element.classList.add(\"class name\")</p><p>element.classList.remove(\"class name\")</p><p>element.classList.contains(\"class name\")</p><p>element.classList.replace(\"old class\", \"new class\")</p>"
    },
    {
      "question": "What is the difference between currentTarget and target in javascript?",
      "answer": "Target is the element that triggered the event (e.g., the user clicked on) and currentTarget is the element that the event listener is attached to."
    },
    {
      "question": "What is some functionality of \"use strict\";?",
      "answer": "<p>-No undeclared global variable assignment</p><p>-Can not use \"delete\" syntax other than on object</p><p>-Can not define a key more than once in an object</p><p>-\"eval\" syntax is will throw an error</p><p>-Can not overwrite \"arguments\" syntax</p>"
    },
    {
      "question": "What is a closure",
      "answer": "A closure is a function defined inside another function that has access to variables that are declared and defined in the parent function scope. The concept of closure is the idea that functions retain their scope even if they are passed around and called outside of that scope."
    },
    {
      "question": "How do you add new method to a Class after the Class has been created?",
      "answer": "prototype is the key here: 'ClassName.prototype.newMethod = function() { return `How are you, ${this.fullName}` }'"
    },
    {
      "question": "What in Javascript is not an object?",
      "answer": "Primitive types string, boolean, number and also null and unassigned"
    },
    {
      "question": "What is an object literal?",
      "answer": "An object created using {} instead of Object.create"
    },
    {
      "question": "What would you copy data from one obect to another?",
      "answer": "const object2 = Object.assign({}, object1);"
    },
    {
      "question": "What are the 9 native object constructors in JS?",
      "answer": "Number, String, Boolean, Object, Array, Function, Date, Regex, Error"
    },
    {
      "question": "What is a constructor?",
      "answer": "A constructor is a function used for initializing new objects, and you use the new keyword to call the constructor. 'function Account() {}' ES6 uses 'class'"
    },
    {
      "question": "How to add a method to a constructor after the constructor is already created?",
      "answer": "constructorName.prototype.fullName = function() { return `${this.firstName} ${this.lastName}`"
    },
    {
      "question": "Show an example to inherit from another class/constructor/object",
      "answer": "EightGrader.prototype = Object.create(Student.prototype)"
    },
    {
      "question": "How would one interate through the properties of an object",
      "answer": "<p>for (let prop in name) {</p> <p>console.log(name[prop]);</p> <p>{</p>"
    },
    {
      "question": "How to check if property exists on an object",
      "answer": "<p>personObj.hasOwnProperty('name');</p> <p>returns a boolean</p>"
    },
    {
      "question": "What is scope?",
      "answer": "variable access - when a piece of code is running it is what variables we have access to"
    },
    {
      "question": "What is context?",
      "answer": "this - the value of thsi is the context"
    }
  ],
  "cssQuestions": [
    {
      "question": "What does .child > li do?",
      "answer": "This children selector only selects all DIRECT \"li\" children"
    },
    {
      "question": "What does h2 ~ p do?",
      "answer": "Selects ALL ADJACENT \"p\" elements, not just the first adjacent"
    },
    {
      "question": "What does h2 + p do?",
      "answer": "Selects only the FIRST ADJACENT \"p\" element"
    },
    {
      "question": "What does [lang |= en] do?",
      "answer": "Select and styles elements, where the lang attribute's value starts with \"en\""
    }
  ]
}